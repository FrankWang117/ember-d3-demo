<div class="article" ...attributes>
    <h2>Basic Shape in SVG</h2>
    
    <h2 id="-rect">矩形 - rect</h2>
<p>矩形在可视化的图表中,可以用来展示柱状图以及柱状堆积图等.  </p>
<div class="b-rect" {{did-insert this.initRect}}></div>
<p>现在来看一下在页面中生成的这样的图形的 HTML 代码是什么:  </p>
<pre><code class="lang-html">&lt;svg <span class="hljs-built_in">width</span>=<span class="hljs-string">"100"</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">"100"</span> style=<span class="hljs-string">"background-color: rgb(250, 251, 252);"</span>&gt;
    &lt;<span class="hljs-built_in">rect</span> x=<span class="hljs-string">"10"</span> y=<span class="hljs-string">"10"</span> <span class="hljs-built_in">width</span>=<span class="hljs-string">"24"</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">"80"</span> <span class="hljs-built_in">fill</span>=<span class="hljs-string">"lightblue"</span>&gt;&lt;/<span class="hljs-built_in">rect</span>&gt;
&lt;/svg&gt;
</code></pre>
<p>通过代码我们大概可以得出,画出一个矩形,需要两个步骤:</p>
<ul>
<li>绘制 svg 容器</li>
<li>添加 rect 元素(表示矩形)  </li>
</ul>
<p>所以我们使用 D3.js 来绘制这样的矩形的代码就是:  </p>
<pre><code class="lang-javascript">initRect() {
  <span class="hljs-keyword">let</span> container = <span class="hljs-keyword">select</span>(<span class="hljs-string">".b-rect"</span>);
  <span class="hljs-keyword">let</span> rectSvg = container.append(<span class="hljs-string">'svg'</span>)
  .attr(<span class="hljs-string">'width'</span>,<span class="hljs-number">100</span>)
  .attr(<span class="hljs-string">'height'</span>,<span class="hljs-number">100</span>)
  .style(<span class="hljs-string">'background-color'</span>,<span class="hljs-string">'#fafbfc'</span>);

  rectSvg.append(<span class="hljs-string">'rect'</span>)
    .attr(<span class="hljs-string">'x'</span>,<span class="hljs-number">10</span>)
    .attr(<span class="hljs-string">'y'</span>,<span class="hljs-number">10</span>)
    .attr(<span class="hljs-string">'width'</span>,<span class="hljs-number">24</span>)
    .attr(<span class="hljs-string">'height'</span>,<span class="hljs-number">80</span>)
    .attr(<span class="hljs-string">'fill'</span>,<span class="hljs-string">'lightblue'</span>)
}
</code></pre>
<p>可以看出,代码也是遵循的上文所说的两步.  </p>
<p>需要注意的是,我们如何控制一个 rect 元素的属性,使其可以达到我们想要的样式,那就需要修改 rect 元素的基本的四个属性:</p>
<ul>
<li>x - 控制当前矩形(左上角)距离 svg 坐标系的横轴 0 点的距离;</li>
<li>y - 控制当前矩形(左上角)距离 svg 坐标系的纵轴 0 点的距离;</li>
<li>width - 控制当前矩形的宽度.(D3.js 中可以使用 bandWidth 属性获取)</li>
<li>height - 控制当前矩形的高度.</li>
</ul>
<p>这四个属性设置了之后,我们的矩形就出来了.进一步的设置样式的话,需要使用其他的属性,例如 <code>fill</code> 等.  </p>
<p><strong>注意</strong> 这里需要特别注意的是 svg 中画布的坐标系:</p>
<p><img src="https://i.loli.net/2020/03/15/zMJ74X8r3SPnxkh.png" alt="Canvas_default_grid"></p>
<p>可以看这个来自 <a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Positions">MDN</a> 的图片.x 轴的正方向是 x 轴 0 点的位置水平向右. y 轴的正方向是 y 轴零点的位置垂直向下.  </p>
    <div class="dropdown-divider"></div>
    <h2 id="-line">直线 - line</h2>
<p>直线通常在可视化图形中作为图例中线条的图例而使用.</p>
    <div class="b-line" {{did-insert this.initLine}}></div>
<p>还是先来看一下直线在 HTML 代码中是什么样的:</p>
<pre><code class="lang-html">&lt;svg <span class="hljs-built_in">width</span>=<span class="hljs-string">"100"</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">"100"</span> style=<span class="hljs-string">"background-color: #f8f9fa;"</span>&gt;
    &lt;<span class="hljs-built_in">line</span> x1=<span class="hljs-string">"10"</span> y1=<span class="hljs-string">"10"</span> x2=<span class="hljs-string">"60"</span> y2=<span class="hljs-string">"60"</span> <span class="hljs-built_in">stroke</span>=<span class="hljs-string">"lightblue"</span> <span class="hljs-built_in">stroke</span>-<span class="hljs-built_in">width</span>=<span class="hljs-string">"4"</span>&gt;&lt;/<span class="hljs-built_in">line</span>&gt;&lt;/svg&gt;
</code></pre>
<p>同样的,生成一条直线也是需要两步:  </p>
<ul>
<li>svg 容器</li>
<li>line 元素</li>
</ul>
<p>同样的使用 D3.js 来绘制一条直线那就没多大问题了:</p>
<pre><code class="lang-javascript">initLine<span class="hljs-literal">()</span> {
    <span class="hljs-keyword">let</span> container = select(<span class="hljs-string">".b-line"</span>);
    <span class="hljs-keyword">let</span> rectSvg = container.append(<span class="hljs-symbol">'svg'</span>)
    .attr(<span class="hljs-symbol">'width'</span>,<span class="hljs-number">100</span>)
    .attr(<span class="hljs-symbol">'height'</span>,<span class="hljs-number">100</span>)
    .style(<span class="hljs-symbol">'background</span>-color',<span class="hljs-symbol">'white'</span>);

    rectSvg.append(<span class="hljs-symbol">'line'</span>)
        .attr(<span class="hljs-symbol">'x1'</span>,<span class="hljs-number">10</span>)
        .attr(<span class="hljs-symbol">'y1'</span>,<span class="hljs-number">10</span>)
        .attr(<span class="hljs-symbol">'x2'</span>,<span class="hljs-number">60</span>)
        .attr(<span class="hljs-symbol">'y2'</span>,<span class="hljs-number">60</span>)
        .attr(<span class="hljs-symbol">'stroke'</span>,<span class="hljs-string">"lightblue"</span>)
        .attr(<span class="hljs-symbol">'stroke</span>-width',<span class="hljs-number">4</span>)
}
</code></pre>
<p>和上文中生成矩形的代码大致相同,所以我们的关注点放在 line 元素必须属性的相关设置:</p>
<ul>
<li>x1 / x2 - 直线起点/终点的 x 轴方向上的坐标位置</li>
<li>y1 / y2 - 直线起点/终点的 y 轴方向上的坐标位置</li>
<li>stroke-width - 直线的宽度</li>
<li>stroke - 直线填充的颜色</li>
</ul>
<p>其中 x1 / x2 / y1 / y2 为 line 元素特有的属性.  </p>
<p>有了这四个属性如果不添加 stroke 相关的属性,直线还是不会在页面中展示出来的.因为直线在几何中是一维的.  </p>

    <div class="dropdown-divider"></div>
    
    <h2 id="-circle">圆形 - circle</h2>
<p>圆形在可视化中可以作为散点图中的气泡等.  </p>
<div class="b-circle" {{did-insert this.initCircle}}></div>
<p>同样,还是先看 circle 元素在 HTML 中的展现形式:</p>
<pre><code class="lang-html">&lt;svg <span class="hljs-built_in">width</span>=<span class="hljs-string">"100"</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">"100"</span> style=<span class="hljs-string">"background-color: rgb(250, 251, 252);"</span>&gt;
    &lt;<span class="hljs-built_in">circle</span> cx=<span class="hljs-string">"50"</span> cy=<span class="hljs-string">"50"</span> r=<span class="hljs-string">"25"</span> <span class="hljs-built_in">fill</span>=<span class="hljs-string">"lightblue"</span>&gt;&lt;/<span class="hljs-built_in">circle</span>&gt;
&lt;/svg&gt;
</code></pre>
<p>这次是使用的 svg 中的 cirlce 元素标签.</p>
<p>那么使用 D3.js 绘制一个这样的圆形的代码则是:</p>
<pre><code class="lang-javascript">initCircle() {
    <span class="hljs-keyword">let</span> container = <span class="hljs-keyword">select</span>(<span class="hljs-string">".b-circle"</span>);
    <span class="hljs-keyword">let</span> rectSvg = container.append(<span class="hljs-string">'svg'</span>)
    .attr(<span class="hljs-string">'width'</span>,<span class="hljs-number">100</span>)
    .attr(<span class="hljs-string">'height'</span>,<span class="hljs-number">100</span>)
    .style(<span class="hljs-string">'background-color'</span>,<span class="hljs-string">'#fafbfc'</span>);

    rectSvg.append(<span class="hljs-string">'circle'</span>)
        .attr(<span class="hljs-string">'cx'</span>,<span class="hljs-number">50</span>)
        .attr(<span class="hljs-string">'cy'</span>,<span class="hljs-number">50</span>)
        .attr(<span class="hljs-string">'r'</span>,<span class="hljs-number">25</span>)
        .attr(<span class="hljs-string">'fill'</span>,<span class="hljs-string">"lightblue"</span>)
}
</code></pre>
<p>每个 svg 的图形元素都会有自己的一些专有属性,那属于 circle 元素的专有属性为:</p>
<ul>
<li>cx - circle 的圆心 x 轴坐标</li>
<li>cy - circle 的圆心 y 轴坐标</li>
<li>r - circle 的半径</li>
</ul>
<p>那既然有 circle ,椭圆的画法也就很明了了:</p>
 <div class="dropdown-divider"></div>
    

<h2 id="-ellipse">椭圆 - ellipse</h2>
<div class="b-ellipse" {{did-insert this.initEllipse}}></div>
<p>由于跟 circle 相差不大,所以直接上相关的代码:</p>
<pre><code class="lang-html">&lt;svg <span class="hljs-built_in">width</span>=<span class="hljs-string">"100"</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">"100"</span> <span class="hljs-built_in">style</span>=<span class="hljs-string">"background-color: rgb(250, 251, 252);"</span>&gt;
    &lt;<span class="hljs-built_in">ellipse</span> cx=<span class="hljs-string">"50"</span> cy=<span class="hljs-string">"50"</span> rx=<span class="hljs-string">"30"</span> ry=<span class="hljs-string">"20"</span> fill=<span class="hljs-string">"lightblue"</span>&gt;&lt;/<span class="hljs-built_in">ellipse</span>&gt;
&lt;/svg&gt;
</code></pre>
<p>使用 D3.js 来生成这样的图形的代码则是:</p>
<pre><code class="lang-javascript">initEllipse() {
    <span class="hljs-keyword">let</span> container = <span class="hljs-keyword">select</span>(<span class="hljs-string">".b-ellipse"</span>);
    <span class="hljs-keyword">let</span> rectSvg = container.append(<span class="hljs-string">'svg'</span>)
    .attr(<span class="hljs-string">'width'</span>,<span class="hljs-number">100</span>)
    .attr(<span class="hljs-string">'height'</span>,<span class="hljs-number">100</span>)
    .style(<span class="hljs-string">'background-color'</span>,<span class="hljs-string">'#fafbfc'</span>);

    rectSvg.append(<span class="hljs-string">'ellipse'</span>)
        .attr(<span class="hljs-string">'cx'</span>,<span class="hljs-number">50</span>)
        .attr(<span class="hljs-string">'cy'</span>,<span class="hljs-number">50</span>)
        .attr(<span class="hljs-string">'rx'</span>,<span class="hljs-number">30</span>)
        .attr(<span class="hljs-string">'ry'</span>,<span class="hljs-number">20</span>)
        .attr(<span class="hljs-string">'fill'</span>,<span class="hljs-string">"lightblue"</span>)
}
</code></pre>
<p>椭圆的相关属性:</p>
<ul>
<li>cx / cy 同 circle 中的相应属性</li>
<li>rx / ry 也是很好理解,对应椭圆 x / y 轴的长度,与数学上定义的椭圆一样.  </li>
</ul>
<div class="dropdown-divider"></div>
<p>折现&amp;多边形 - polyline&amp;polygon</p>
<p>这个在实际的生产中暂时没有用到,就简单的提一下:</p>
    <div class="b-poly" {{did-insert this.initPoly}}></div>

<pre><code class="lang-html">&lt;svg <span class="hljs-built_in">width</span>=<span class="hljs-string">"100"</span> <span class="hljs-built_in">height</span>=<span class="hljs-string">"100"</span> style=<span class="hljs-string">"background-color: rgb(250, 251, 252);"</span>&gt;
    &lt;polyline points=<span class="hljs-string">"05,30 15,30 15,20 25,20 25,10 35,10"</span> <span class="hljs-built_in">stroke</span>-<span class="hljs-built_in">width</span>=<span class="hljs-string">"4"</span> <span class="hljs-built_in">stroke</span>=<span class="hljs-string">"lightblue"</span> <span class="hljs-built_in">fill</span>=<span class="hljs-string">"none"</span>&gt;&lt;/polyline&gt;
    &lt;polygon points=<span class="hljs-string">"80,80 100,80 100,100 80,100"</span> <span class="hljs-built_in">stroke</span>-<span class="hljs-built_in">width</span>=<span class="hljs-string">"4"</span> <span class="hljs-built_in">stroke</span>=<span class="hljs-string">"lightblue"</span> <span class="hljs-built_in">fill</span>=<span class="hljs-string">"lightgreen"</span>&gt;&lt;/polygon&gt;
&lt;/svg&gt;
</code></pre>
<p>看了代码应该比较清楚.  </p>
<p>但是在 D3.js 中是不会使用 <code>&lt;line&gt;</code> ,<code>&lt;polyline&gt;</code> 生成相关的折线图的. D3.js 中使用的相关 API 是 <code>d3.line</code> ,而使用的 svg 元素则是 path. 详情请查看<a href="https://github.com/xswei/d3-shape/blob/master/README.md#line">d3.line</a> .</p>

   
    
    <div class="dropdown-divider"></div>
</div>
